{"_id":"084MOWWSEVNwpHVG","author":"ru9MkwAaWXaeSZph","command":"const tokens = canvas.tokens.controlled.filter((t) => ['character', 'npc', 'familiar'].includes(t.actor.data.type));\nif (tokens.length === 0) {\n    ui.notifications.error(`You must select at least one npc/pc token`);\n} else {\n    tokens.map((p) => p.actor).forEach((actor) => actor.data.data.attributes.perception.roll({event, options: ['secret']}));\n}","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.084MOWWSEVNwpHVG"}},"img":"systems/pf2e/icons/spells/vision-of-weakness.webp","name":"Perception For Selected Tokens","permission":{"default":0},"scope":"global","type":"script"}
{"_id":"0GU2sdy3r2MeC56x","actorIds":[],"author":"4rlSA43v1xPa1vsy","command":"game.pf2e.actions.restForTheNight({ actors: [token?.actor ?? actor ?? game.user.character].filter((actor) => actor) })","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.0GU2sdy3r2MeC56x"}},"img":"icons/svg/sleep.svg","name":"Rest for the Night","permission":{"default":0},"scope":"global","type":"script"}
{"_id":"4nEbRlo2cB9KkK7T","actorIds":[],"author":"uAvrJeywnWLwQIhl","command":"let ITEM_UUID = 'Compendium.pf2e.feat-effects.gYpy9XBPScIlY93p'; // Stance: Mountain Stance\nfunction checkFeat(slug) {\n    if (token.actor.items.find((i) => i.data.data.slug === slug && i.type === 'feat')) {\n        return true;\n    }\n    return false;\n}\nif (checkFeat('mountain-stronghold')) {\n    ITEM_UUID = 'Compendium.pf2e.feat-effects.LXbVcutEIW8eWZEz';\n}\nif (checkFeat('mountain-quake')) {\n    ITEM_UUID = 'Compendium.pf2e.feat-effects.wuERa7exfXXl6I37';\n}\n(async () => {\n    const effect = duplicate(await fromUuid(ITEM_UUID));\n    effect.flags.core = effect.flags.core ?? {};\n    effect.flags.core.sourceId = effect.flags.core.sourceId ?? ITEM_UUID;\n    for await (const token of canvas.tokens.controlled) {\n        let existing = token.actor.items.find(\n            (i) => i.type === 'effect' && i?.data?.flags?.core?.sourceId === ITEM_UUID,\n        );\n        if (existing) {\n            token.actor.deleteOwnedItem(existing._id);\n        } else {\n            let clothingPotency = 0;\n            const clothing = token.actor.items\n                .filter((item) => item.data.type === 'armor')\n                ?.filter((item) => item.data.data.slug === 'clothing-explorers')\n                ?.find((item) => item.data.data.equipped.value);\n            if (clothing) {\n                clothingPotency = parseInt(clothing.data?.data?.potencyRune?.value);\n            }\n            let bracers = token.actor.items\n                .filter((item) => item.data.type === 'equipment')\n                ?.filter((item) => item.data.data.slug === 'bracers-of-armor-i')\n                ?.filter((item) => item.data.data.equipped.value)\n                ?.find((item) => item.data.data.invested.value)\n                ? 1\n                : 0;\n            bracers = token.actor.items\n                .filter((item) => item.data.type === 'equipment')\n                ?.filter((item) => item.data.data.slug === 'bracers-of-armor-ii')\n                ?.filter((item) => item.data.data.equipped.value)\n                ?.find((item) => item.data.data.invested.value)\n                ? 2\n                : bracers;\n            bracers = token.actor.items\n                .filter((item) => item.data.type === 'equipment')\n                ?.filter((item) => item.data.data.slug === 'bracers-of-armor-iii')\n                ?.filter((item) => item.data.data.equipped.value)\n                ?.find((item) => item.data.data.invested.value)\n                ? 3\n                : bracers;\n            let mageArmorBonus = 0;\n            const mageArmor = token.actor.items\n                .filter((item) => item.data.type === 'effect')\n                ?.find((item) => item.data.data.slug === 'spell-effect-mage-armor');\n            if (mageArmor) {\n                mageArmorBonus = mageArmor.data.data.level.value === 10 ? 3 : mageArmor.data.data.level.value >= 5 ? 2 : 1;\n            }\n            let itemBonus = Math.max(bracers, clothingPotency, mageArmorBonus);\n            const rule = effect.data.rules.find(\n                (r) => r.selector === 'ac' && r.key === 'FlatModifier',\n            );\n            if (rule) {\n                rule.value = rule.value + itemBonus;\n            }\n            token.actor.createOwnedItem(effect);\n        }\n    }\n})();\n","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.4nEbRlo2cB9KkK7T"}},"img":"systems/pf2e/icons/features/feats/mountain-stance.webp","name":"Toggle Mountain Stance","permission":{"default":1},"scope":"global","type":"script"}
{"_id":"6duZj0Ygiqv712rq","actorIds":[],"author":"4rlSA43v1xPa1vsy","command":"function CheckFeat(slug) {\n    if (token.actor.items.find((i) => i.data.data.slug === slug && i.type === \"feat\")) {\n        return true;\n    }\n    return false;\n}\nconst rollTreatWounds = async ({ DC, bonus, med, riskysurgery, mortalhealing }) => {\n    const options = actor.getRollOptions([\"all\", \"skill-check\", \"medicine\"]);\n    options.push(\"treat wounds\");\n    options.push(\"action:treat-wounds\");\n    const dc = {\n        value: DC,\n        visibility: \"all\",\n    };\n    if (riskysurgery || mortalhealing) {\n        dc.modifiers = {\n            success: \"one-degree-better\",\n        };\n    }\n    if (riskysurgery) {\n        options.push(\"risky-surgery\");\n    }\n    med.roll({\n        dc: dc,\n        event: event,\n        options: options,\n        callback: (roll) => {\n            let healFormula, successLabel;\n            const magicHands = CheckFeat(\"magic-hands\");\n            const bonusString = bonus > 0 ? `+ ${bonus}` : \"\";\n            if (roll.data.degreeOfSuccess === 3) {\n                healFormula = magicHands ? `32${bonusString}` : `4d8${bonusString}`;\n                successLabel = \"Critical Success\";\n            } else if (roll.data.degreeOfSuccess === 2) {\n                healFormula = magicHands ? `16${bonusString}` : `2d8${bonusString}`;\n                successLabel = \"Success\";\n            } else if (roll.data.degreeOfSuccess === 1) {\n                successLabel = \"Failure\";\n            } else if (roll.data.degreeOfSuccess === 0) {\n                healFormula = \"1d8\";\n                successLabel = \"Critical Failure\";\n            }\n            if (riskysurgery) {\n                ChatMessage.create({\n                    user: game.user.id,\n                    type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n                    flavor: `<strong>Damage Roll: Risky Surgery</strong>`,\n                    roll: new Roll(\"{1d8}[slashing]\").roll(),\n                    speaker: ChatMessage.getSpeaker(),\n                });\n            }\n            if (healFormula !== undefined) {\n                const healRoll = new Roll(`{${healFormula}}[healing]`).roll();\n                const rollType = roll.data.degreeOfSuccess > 1 ? \"Healing\" : \"Damage\";\n                ChatMessage.create({\n                    user: game.user.id,\n                    type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n                    flavor: `<strong>${rollType} Roll: Treat Wounds</strong> (${successLabel})`,\n                    roll: healRoll,\n                    speaker: ChatMessage.getSpeaker(),\n                });\n            }\n        },\n    });\n};\nasync function applyChanges($html) {\n    for (const token of canvas.tokens.controlled) {\n        var med = token.actor.data.data.skills.med;\n        if (!med) {\n            ui.notifications.warn(`Token ${token.name} does not have the medicine skill`);\n            continue;\n        }\n        const { name } = token;\n        const mod = parseInt($html.find('[name=\"modifier\"]').val()) || 0;\n        const requestedProf = parseInt($html.find('[name=\"dc-type\"]')[0].value) || 1;\n        const riskysurgery = $html.find('[name=\"risky_surgery_bool\"]')[0]?.checked;\n        const mortalhealing = $html.find('[name=\"mortal_healing_bool\"]')[0]?.checked;\n        const skill = $html.find('[name=\"skill\"]')[0]?.value;\n        // Handle Rule Interpretation\n        if (game.user.isGM) {\n            await game.settings.set(\n                \"pf2e\",\n                \"RAI.TreatWoundsAltSkills\",\n                $html.find('[name=\"strict_rules\"]')[0]?.checked\n            );\n        }\n        var usedProf = 0;\n        if (game.settings.get(\"pf2e\", \"RAI.TreatWoundsAltSkills\")) {\n            if (skill === \"cra\") {\n                med = token.actor.data.data.skills[\"cra\"];\n            }\n            if (skill === \"nat\") {\n                med = token.actor.data.data.skills[\"nat\"];\n            }\n            usedProf = requestedProf <= med.rank ? requestedProf : med.rank;\n        } else {\n            usedProf = requestedProf <= med.rank ? requestedProf : med.rank;\n            if (skill === \"cra\") {\n                med = token.actor.data.data.skills[\"cra\"];\n            }\n            if (skill === \"nat\") {\n                med = token.actor.data.data.skills[\"nat\"];\n                if (usedProf === 0) {\n                    usedProf = 1;\n                }\n            }\n        }\n        const medicBonus = CheckFeat(\"medic-dedication\") ? (usedProf - 1) * 5 : 0;\n        const roll = [\n            () => ui.notifications.warn(`${name} is not trained in Medicine and doesn't know how to treat wounds.`),\n            () => rollTreatWounds({ DC: 15 + mod, bonus: 0 + medicBonus, med, riskysurgery, mortalhealing }),\n            () => rollTreatWounds({ DC: 20 + mod, bonus: 10 + medicBonus, med, riskysurgery, mortalhealing }),\n            () => rollTreatWounds({ DC: 30 + mod, bonus: 30 + medicBonus, med, riskysurgery, mortalhealing }),\n            () => rollTreatWounds({ DC: 40 + mod, bonus: 50 + medicBonus, med, riskysurgery, mortalhealing }),\n        ][usedProf];\n        roll();\n    }\n}\nif (token === undefined) {\n    ui.notifications.warn(\"No token is selected.\");\n} else {\n    const chirurgeon = CheckFeat(\"chirurgeon\");\n    const naturalMedicine = CheckFeat(\"natural-medicine\");\n    const dialog = new Dialog({\n        title: \"Treat Wounds\",\n        content: `\n<div>Select a target DC. Remember that you can't attempt a heal above your proficiency. Attempting to do so will downgrade the DC and amount healed to the highest you're capable of.</div>\n<hr/>\n${\n    chirurgeon || naturalMedicine\n        ? `\n<form>\n<div class=\"form-group\">\n<label>Treat Wounds Skill:</label>\n<select id=\"skill\" name=\"skill\">\n<option value=\"med\">Medicine</option>\n${chirurgeon ? `<option value=\"cra\">Crafting</option>` : ``}\n${naturalMedicine ? `<option value=\"nat\">Nature</option>` : ``}\n</select>\n</div>\n</form>\n`\n        : ``\n}\n<form>\n<div class=\"form-group\">\n<label>Medicine DC:</label>\n<select id=\"dc-type\" name=\"dc-type\">\n<option value=\"1\">Trained DC 15</option>\n<option value=\"2\">Expert DC 20, +10 Healing</option>\n<option value=\"3\">Master DC 30, +30 Healing</option>\n<option value=\"4\">Legendary DC 40, +50 Healing</option>\n</select>\n</div>\n</form>\n<form>\n<div class=\"form-group\">\n<label>DC Modifier:</label>\n<input id=\"modifier\" name=\"modifier\" type=\"number\"/>\n</div>\n</form>\n${\n    CheckFeat(\"risky-surgery\")\n        ? `<form><div class=\"form-group\">\n<label>Risky Surgery</label>\n<input type=\"checkbox\" id=\"risky_surgery_bool\" name=\"risky_surgery_bool\"></input>\n</div></form>`\n        : ``\n}\n${\n    CheckFeat(\"mortal-healing\")\n        ? `<form><div class=\"form-group\">\n<label>Mortal Healing</label>\n<input type=\"checkbox\" id=\"mortal_healing_bool\" name=\"mortal_healing_bool\" checked></input>\n</div></form>`\n        : ``\n}\n${\n    game.user.isGM\n        ? `<form><div class=\"form-group\">\n<label>Allow higher DC from alternate skills?</label>\n<input type=\"checkbox\" id=\"strict_rules\" name=\"strict_rules\"` +\n          (game.settings.get(\"pf2e\", \"RAI.TreatWoundsAltSkills\") ? ` checked` : ``) +\n          `></input>\n</div></form>`\n        : ``\n}\n</form>\n`,\n        buttons: {\n            yes: {\n                icon: `<i class=\"fas fa-hand-holding-medical\"></i>`,\n                label: \"Treat Wounds\",\n                callback: applyChanges,\n            },\n            no: {\n                icon: `<i class=\"fas fa-times\"></i>`,\n                label: \"Cancel\",\n            },\n        },\n        default: \"yes\",\n    });\n    dialog.render(true);\n}","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.6duZj0Ygiqv712rq"}},"img":"icons/svg/regen.svg","name":"Treat Wounds","permission":{"default":0},"scope":"global","type":"script"}
{"_id":"MAHxEeGf31wqv3jp","author":"oxKN2HrOvz2sSqlF","command":"/**\n * @typedef {{data: {data: {details: {level: number|string|undefined|null, isComplex: boolean}}, type: string}}} Hazard\n */\n\n/**\n * @param actors {Array<Hazard>}\n * @param type {string}\n * @returns {Array<HazardLevel>}\n */\nfunction getHazardLevels(actors) {\n    return actors.filter((a) => a.data.type === \"hazard\");\n}\n\n/**\n * @typedef {{data: {data: {details: {level: {value: number|string|undefined|null}}}, type: string}}} Actor\n */\n\n/**\n * @param actors {Array<Actor>}\n * @param type {string}\n * @returns {Array<number>}\n */\nfunction getLevels(actors, type) {\n    return actors.filter((a) => a.data.type === type).map((a) => parseInt(a.data.data.details.level.value ?? \"1\", 10));\n}\n\n/**\n * @param xp {XP}\n * @returns {string}\n */\nfunction dialogTemplate(xp) {\n    return `\n<h2>XP</h2>\n<table>\n    <tr>\n        <th>Party</th>\n        <td>PCs: ${xp.partySize} (Lv ${xp.partyLevel})</td>\n    </tr>\n    <tr>\n        <th>Rating</th>\n        <td>${xp.rating} (${xp.xpPerPlayer} XP)</td>\n    </tr>\n    <tr>\n        <th>Reward</th>\n        <td>${xp.encounterBudgets.moderate} XP</td>\n    </tr>\n</table>\n<h2>Budgets</h2>\n<table>\n    <tr>\n        <th>Trivial</th>\n        <td>${xp.encounterBudgets.trivial} XP</td>\n    </tr>\n    <tr>\n        <th>Low</th>\n        <td>${xp.encounterBudgets.low} XP</td>\n    </tr>\n    <tr>\n        <th>Moderate</th>\n        <td>${xp.encounterBudgets.moderate} XP</td>\n    </tr>\n    <tr>\n        <th>Severe</th>\n        <td>${xp.encounterBudgets.severe} XP</td>\n    </tr>\n    <tr>\n        <th>Extreme</th>\n        <td>${xp.encounterBudgets.extreme} XP</td>\n    </tr>\n</table>`;\n}\n\nconst askLevelPopupTemplate = () => {\n    const partySize = parseInt(localStorage.getItem(\"xpMacroPartySize\") ?? 4, 10);\n    const partyLevel = parseInt(localStorage.getItem(\"xpMacroPartyLevel\") ?? 1, 10);\n    return `\n    <form>\n    <div class=\"form-group\">\n        <label>Party Size</label>\n        <input id=\"party-size\" name=\"party-size\" type=\"number\" value=\"${partySize}\">\n    </div>\n    <div class=\"form-group\">\n        <label>Party level</label>\n        <input id=\"party-level\" name=\"party-level\" type=\"number\" value=\"${partyLevel}\">\n    </div>\n    </form>\n    `;\n};\n\n/**\n * @param partyLevel {number}\n * @param partySize {number}\n * @param npcLevels {Array<number>}\n * @param hazardLevels {Array<HazardLevel>}\n */\nfunction showXP(partyLevel, partySize, npcLevels, hazardLevels) {\n    const xp = game.pf2e.gm.calculateXP(partyLevel, partySize, npcLevels, hazardLevels, {\n        proficiencyWithoutLevel: game.settings.get(\"pf2e\", \"proficiencyVariant\") === \"ProficiencyWithoutLevel\",\n    });\n    new Dialog({\n        title: \"XP\",\n        content: dialogTemplate(xp),\n        buttons: {},\n    }).render(true);\n}\n\n/**\n * @param npcLevels {Array<number>}\n * @param hazardLevels {Array<HazardLevel>}\n */\nfunction askPartyLevelAndSize(npcLevels, hazardLevels) {\n    new Dialog({\n        title: \"Party Information\",\n        content: askLevelPopupTemplate,\n        buttons: {\n            no: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: \"Cancel\",\n            },\n            yes: {\n                icon: '<i class=\"fas fa-calculator\"></i>',\n                label: \"Calculate XP\",\n                callback: ($html) => {\n                    const partySize = parseInt($html[0].querySelector('[name=\"party-size\"]').value, 10) ?? 1;\n                    const partyLevel = parseInt($html[0].querySelector('[name=\"party-level\"]').value, 10) ?? 1;\n                    // persist for future uses\n                    localStorage.setItem(\"xpMacroPartySize\", partySize);\n                    localStorage.setItem(\"xpMacroPartyLevel\", partyLevel);\n                    showXP(partyLevel, partySize, npcLevels, hazardLevels);\n                },\n            },\n        },\n        default: \"yes\",\n    }).render(true);\n}\n\nfunction main() {\n    const actors = canvas.tokens.controlled.map((a) => a.actor);\n    const npcLevels = getLevels(actors, \"npc\");\n    const pcLevels = getLevels(actors, \"character\");\n    const hazardLevels = getHazardLevels(actors);\n    if (npcLevels.length === 0 && hazardLevels.length === 0) {\n        ui.notifications.error(`You must select at least one npc and/or hazard token and optionally all PC tokens`);\n        return;\n    }\n\n    if (pcLevels.length === 0) {\n        askPartyLevelAndSize(npcLevels, hazardLevels);\n    } else {\n        showXP(pcLevels[0], pcLevels.length, npcLevels, hazardLevels);\n    }\n}\n\nmain();","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.MAHxEeGf31wqv3jp"}},"img":"systems/pf2e/icons/spells/athletic-rush.webp","name":"XP","permission":{"default":0},"scope":"global","type":"script"}
{"_id":"NQkc5rKoeFemdVHr","actorIds":[],"author":"ru9MkwAaWXaeSZph","command":"const tokens = canvas.tokens.controlled;\nif (tokens.length === 0) {\n    ui.notifications.error(`You must select at least one pc token`);\n} else {\n    game.pf2e.gm.launchTravelSheet(tokens.map((p) => p.actor));\n}","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.NQkc5rKoeFemdVHr"}},"img":"systems/pf2e/icons/equipment/adventuring-gear/cartographers-kit.webp","name":"Travel Duration","permission":{"default":0},"scope":"global","type":"script"}
{"_id":"aS6F7PSUlS9JM5jr","actorIds":[],"author":"gE95JAZb6BOLkaNX","command":"let toChat = (content) => {\r\n    let chatData = {\r\n        user: game.user.id,\r\n        content,\r\n        speaker: ChatMessage.getSpeaker(),\r\n    }\r\n    ChatMessage.create(chatData, {})\r\n}\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Take a Breather`,\r\n  content: `\r\n    <div>Rest for 10 minutes, spend a resolve point, and regain stamina?</div>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Take a Breather`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n        for ( let token of canvas.tokens.controlled ) {\r\n            const {name} = token;\r\n            console.log(token);\r\n            const {resolve, sp} = token.actor.data.data.attributes;\r\n            console.log(resolve, sp);\r\n            if (resolve.value > 0) {\r\n                let oldSP = sp.value;\r\n                toChat(`${name} has ${sp.value}/${sp.max} SP and spends a resolve point, taking a 10 minute breather. Stamina Refreshed.`);\r\n                token.actor.update({\r\n                    'data.attributes.sp.value': sp.max,\r\n                    'data.attributes.resolve.value': resolve.value-1\r\n                });\r\n            } else {\r\n                toChat(`${name} is tired and needs to go to bed! No resolve points remaining.`);\r\n            }\r\n        }\r\n      }\r\n    }\r\n}).render(true);","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.aS6F7PSUlS9JM5jr"}},"img":"icons/svg/unconscious.svg","name":"Take a Breather","permission":{"default":0},"scope":"global","type":"script"}
{"_id":"jO4Ipjz3BGo6ZzG9","actorIds":[],"author":"lO8uxG8O9SiAPpi1","command":"function CoverMacro() {\n    if (!actor) {\n        ui.notifications.warn(\"You must have an actor selected.\");\n        return;\n    }\n    coverDialog(actor).render(true);\n}\nfunction coverDialog(pc) {\n  const optsCover = [\n      {name: \"Lesser\"},\n      {name: \"Standard\"},\n      {name: \"Greater\"},\n      {name: \"Clear\"},\n  ]    \n  let coveringUp;\n  let content = `<p><strong>Character:</strong> ${pc.name}<br/>`;\n  content += '</p>';\n  content += '<hr/>';\n  content += '<div class=\"form-group\">';\n  content += '<p><label>Cover Type : </label><select id=\"coverType\">';\n  for (let i = 0 ; i < optsCover.length ; i++) {\n    content += `<option value='${i}'`;\n    content += `>${optsCover[i].name}</option>`;\n  }\n  content += '</select></p>';\n  content += '</div>';\n  return new Dialog({\n    title: \"Cover\",\n    content: content,\n    buttons: {\n      roll: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: \"Activate\",\n        callback: () => coveringUp = true,\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: \"Cancel\",\n        callback: () => coveringUp = false,\n      },\n    },\n    default: \"Activate\",\n    close: html => {\n        if (coveringUp) {\n            let chosenCover = optsCover[html.find('#coverType')[0].value];\n            activateCover(chosenCover.name);\n        }\n    }\n  });\n}\nasync function activateCover(chosenCover) {\n    let msgContent;\n    let myCover;\n    let takingCover = true;\n    let lesserCover = 'Compendium.pf2e.equipment-effects.lKkQvMzNG55Yhyef';\n    let standardCover = 'Compendium.pf2e.equipment-effects.I9lfZUiCwMiGogVi';\n    let greaterCover = 'Compendium.pf2e.equipment-effects.dlxrYwsliiZbsTYB';\n    let allCovers = [lesserCover, standardCover, greaterCover];\n    switch(chosenCover) {\n        case 'Clear':\n            var i;\n            for(i=0; i< allCovers.length; i++){\n                let existing = token.actor.items.find(\n                   (e) => e.type === 'effect' && e?.data?.flags?.core?.sourceId === allCovers[i],\n                );\n                if (existing) {\n                    await token.actor.deleteEmbeddedDocuments('Item', [existing.id]);\n                }\n            }\n            msgContent = \"Clearing cover modifiers for \";\n            takingCover = false;\n            break;\n        case 'Lesser':\n            myCover = lesserCover;\n            msgContent = \"Granting lesser cover to \";\n            break;\n        case 'Standard':\n            myCover = standardCover;\n            msgContent = \"Granting standard cover to \";\n            break;\n        case 'Greater':\n            myCover = greaterCover;\n            msgContent = \"Granting greater cover to \";\n            break;\n        default:\n    }\n    \n    if (takingCover) {\n        const item = (await fromUuid(myCover)).toObject();\n        await token.actor.createEmbeddedDocuments('Item', [item]);    \n    }\n    \n    msgContent = msgContent + actor.data.name\n    let chatData = {\n        user: game.user.id,\n        content: msgContent,\n        whisper: [game.user.id],\n    };\n    ChatMessage.create(chatData, {});\n}\n\nCoverMacro()","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.jO4Ipjz3BGo6ZzG9"}},"img":"systems/pf2e/icons/actions/OneAction.webp","name":"Take Cover","permission":{"default":0},"scope":"global","type":"script"}
{"_id":"mxHKWibjPrgfJTDg","actorIds":[],"author":"ru9MkwAaWXaeSZph","command":"function escapeHtml(html) {\n    const text = document.createTextNode(html);\n    const p = document.createElement('p');\n    p.appendChild(text);\n    return p.innerHTML;\n}\nfunction capitalize(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\nfunction isExperiencedProfessional(actor) {\n    return actor.data.items.some((item) => item.type === 'feat' && item.name === 'Experienced Professional');\n}\nfunction rankToProficiency(rank) {\n    if (rank === 0) {\n        return 'untrained';\n    } else if (rank === 1) {\n        return 'trained';\n    } else if (rank === 2) {\n        return 'expert';\n    } else if (rank === 3) {\n        return 'master';\n    } else {\n        return 'legendary';\n    }\n}\nfunction degreeOfSuccessLabel(degreeOfSuccessLabel) {\n    if (degreeOfSuccessLabel === 0) {\n        return 'Critical Failure';\n    } else if (degreeOfSuccessLabel === 1) {\n        return 'Failure';\n    } else if (degreeOfSuccessLabel === 2) {\n        return 'Success';\n    } else {\n        return 'Critical Success';\n    }\n}\nfunction coinsToString(coins, degreeOfSuccess) {\n    if (degreeOfSuccess === 'Critical Failure') {\n        return 'none';\n    } else {\n        return Object.entries(coins)\n            .map(([key, value]) => `${value} ${game.i18n.localize(CONFIG.PF2E.currencies[key])}`)\n            .join(', ');\n    }\n}\nfunction chatTemplate(skillName, earnIncomeResult) {\n    const degreeOfSuccess = degreeOfSuccessLabel(earnIncomeResult.degreeOfSuccess);\n    const payPerDay = escapeHtml(coinsToString(earnIncomeResult.rewards.perDay, degreeOfSuccess));\n    const combinedPay = escapeHtml(coinsToString(earnIncomeResult.rewards.combined, degreeOfSuccess));\n    const level = earnIncomeResult.level;\n    const daysSpentWorking = earnIncomeResult.daysSpentWorking;\n    const forDays =\n        daysSpentWorking > 1 ? `<p><strong>Salary for ${daysSpentWorking} days</strong>: ${combinedPay}</p>` : '';\n    const successColor = earnIncomeResult.degreeOfSuccess > 1 ? 'darkgreen' : 'darkred';\n    const dc = earnIncomeResult.dc;\n    const roll = earnIncomeResult.roll;\n    return `\n    <div class=\"pf2e chat-card\">\n        <header class=\"card-header flexrow\">\n            <img src=\"systems/pf2e/icons/equipment/treasure/currency/gold-pieces.webp\" title=\"Income\" width=\"36\" height=\"36\">\n            <h3>Earn Income Level ${level}</h3>\n        </header>\n        <div class=\"card-content\">\n            <p><strong>Result</strong>: <span style=\"color: ${successColor}\">${degreeOfSuccess} (DC: ${dc}, Roll: ${roll})</span></p>\n            <p><strong>Skill</strong>: ${escapeHtml(skillName)}</p>\n            <p><strong>Salary per day:</strong> ${payPerDay}</p>\n            ${forDays}\n        </div>\n    </div>\n    `;\n}\nfunction postToChat(skillName, earnIncomeResult) {\n    const content = chatTemplate(skillName, earnIncomeResult);\n    const chatData = {\n        user: game.user.id,\n        content,\n        speaker: ChatMessage.getSpeaker(),\n    };\n    ChatMessage.create(chatData, {});\n}\nfunction isProficiencyWithoutLevel() {\n    return game.settings.get('pf2e', 'proficiencyVariant') === 'ProficiencyWithoutLevel';\n}\nfunction calculateIncome(actor, skill, roll, level, days) {\n    const dcOptions = {\n        proficiencyWithoutLevel: isProficiencyWithoutLevel(),\n    };\n    const earnIncomeOptions = {\n        useLoreAsExperiencedProfessional: isExperiencedProfessional(actor) && skill.isLore,\n    };\n    const income = game.pf2e.actions.earnIncome(level, days, roll, skill.proficiency, earnIncomeOptions, dcOptions);\n    postToChat(skill.name, income);\n}\nfunction runEarnIncome(actor, skill, assurance, level, days) {\n    if (assurance) {\n        const actorLevel = actor.data.data.details?.level?.value ?? 1;\n        const proficiencyLevel = isProficiencyWithoutLevel() ? 0 : actorLevel;\n        const proficiencyBonus = proficiencyLevel + skill.rank * 2;\n        calculateIncome(actor, skill, { dieValue: 10, modifier: proficiencyBonus }, level, days);\n    } else {\n        const options = actor.getRollOptions(['all', 'skill-check', skill.name]);\n        options.push('earn-income');\n        game.pf2e.Check.roll(\n            new game.pf2e.CheckModifier(\n                '<span style=\"font-family: Pathfinder2eActions\">A</span> Earn Income',\n                actor.data.data.skills[skill.acronym],\n                [],\n            ),\n            { actor, type: 'skill-check', options },\n            event,\n            (roll) => {\n                const dieValue = roll.dice[0].results[0].result;\n                const modifier = roll._total - dieValue;\n                calculateIncome(actor, skill, { dieValue, modifier }, level, days);\n            },\n        );\n    }\n}\nfunction getSkills(actor) {\n    return (\n        Object.entries(actor.data.data.skills)\n            .map(([acronym, value]) => {\n                return {\n                    acronym,\n                    name: capitalize(value.name),\n                    isLore: value.lore === true,\n                    proficiency: rankToProficiency(value.rank),\n                    rank: value.rank,\n                };\n            })\n            // earn income is a trained action\n            .filter((skill) => skill.proficiency !== 'untrained')\n    );\n}\nfunction askSkillPopupTemplate(skills) {\n    const level = parseInt(localStorage.getItem('earnIncomeLevel') ?? 0, 10);\n    const days = parseInt(localStorage.getItem('earnIncomeDays') ?? 1, 10);\n    const skillAcronym = localStorage.getItem('earnIncomeSkillAcronym');\n    const assurance = localStorage.getItem('earnIncomeAssurance') === 'true';\n    return `\n    <form>\n    <div class=\"form-group\">\n        <label>Trained Skills/Lores</label>\n        <select name=\"skillAcronym\">\n            ${skills\n                .map(\n                    (skill) =>\n                        `<option value=\"${skill.acronym}\" ${\n                            skillAcronym === skill.acronym ? 'selected' : ''\n                        }>${escapeHtml(skill.name)}</option>`,\n                )\n                .join('')}\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label>Use Assurance</label>\n        <input name=\"assurance\" type=\"checkbox\" ${assurance ? 'checked' : ''}>\n    </div>\n    <div class=\"form-group\">\n        <label>Level</label>\n        <select name=\"level\">\n            ${Array(21)\n                .fill(0)\n                .map((_, index) => `<option value=\"${index}\" ${index === level ? 'selected' : ''}>${index}</option>`)\n                .join('')}\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label>Days</label>\n        <input type=\"number\" name=\"days\" value=\"${days}\">\n    </div>\n    </form>\n    `;\n}\nfunction showEarnIncomePopup(actor) {\n    if (actor === null || actor === undefined) {\n        ui.notifications.error(`You must select at least one PC`);\n    } else {\n        const skills = getSkills(actor);\n        new Dialog({\n            title: 'Earn Income',\n            content: askSkillPopupTemplate(skills),\n            buttons: {\n                no: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: 'Cancel',\n                },\n                yes: {\n                    icon: '<i class=\"fas fa-coins\"></i>',\n                    label: 'Earn Income',\n                    callback: ($html) => {\n                        const level = parseInt($html[0].querySelector('[name=\"level\"]').value, 10) ?? 1;\n                        const days = parseInt($html[0].querySelector('[name=\"days\"]').value, 10) ?? 1;\n                        const skillAcronym = $html[0].querySelector('[name=\"skillAcronym\"]').value;\n                        const assurance = $html[0].querySelector('[name=\"assurance\"]').checked;\n                        const skill = skills.find((skill) => skill.acronym === skillAcronym);\n                        localStorage.setItem('earnIncomeLevel', level);\n                        localStorage.setItem('earnIncomeDays', days);\n                        localStorage.setItem('earnIncomeSkillAcronym', skillAcronym);\n                        localStorage.setItem('earnIncomeAssurance', assurance);\n                        runEarnIncome(actor, skill, assurance, level, days);\n                    },\n                },\n            },\n            default: 'yes',\n        }).render(true);\n    }\n}\nshowEarnIncomePopup(actor);","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.mxHKWibjPrgfJTDg"}},"img":"systems/pf2e/icons/equipment/treasure/currency/gold-pieces.webp","name":"Earn Income","permission":{"default":0},"scope":"global","type":"script"}
{"_id":"s2sa8lo9dcIA6UGe","author":"Ooz20ZCUmh0bjKL3","command":"game.pf2e.compendiumBrowser.render(true);","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.s2sa8lo9dcIA6UGe"}},"img":"systems/pf2e/icons/equipment/adventuring-gear/advanced-book-of-translation.webp","name":"Open Compendium Browser","permission":{"default":0},"scope":"global","type":"script"}
{"_id":"yBuEphSaJJ7V9Yw3","author":"ru9MkwAaWXaeSZph","command":"const tokens = canvas.tokens.controlled.filter((t) => ['character', 'npc', 'familiar'].includes(t.actor.data.type));\nif (tokens.length === 0) {\n    ui.notifications.error(`You must select at least one npc/pc token`);\n} else {\n    tokens.map((p) => p.actor).forEach((actor) => actor.data.data.skills.ste.roll({event, options: ['secret']}));\n}","flags":{"core":{"sourceId":"Compendium.pf2e.pf2e-macros.yBuEphSaJJ7V9Yw3"}},"img":"systems/pf2e/icons/features/classes/surprice-attack.webp","name":"Stealth For Selected Tokens","permission":{"default":0},"scope":"global","type":"script"}
